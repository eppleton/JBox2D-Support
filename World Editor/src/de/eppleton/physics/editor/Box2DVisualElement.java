/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.eppleton.physics.editor;

import de.eppleton.physics.editor.scene.Callback;
import de.eppleton.physics.editor.scene.WorldScene;
import java.awt.BorderLayout;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import org.jbox2d.dynamics.World;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
    displayName = "#LBL_Box2D_VISUAL",
iconBase = "de/eppleton/physics/editor/tar.png",
mimeType = "text/x-box2d",
persistenceType = TopComponent.PERSISTENCE_NEVER,
preferredID = "Box2DVisual",
position = 2000)
@Messages("LBL_Box2D_VISUAL=Visual")
public final class Box2DVisualElement extends JPanel implements MultiViewElement, LookupListener{

    private Box2DDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private final JScrollPane jScrollPane = new JScrollPane();
    private WorldScene scene;
    private final String name;
    private boolean syncDocument = false;
    private Result<World> lookupResult;

    public Box2DVisualElement(Lookup lkp) {
        obj = lkp.lookup(Box2DDataObject.class);
        assert obj != null;
        name = obj.getPrimaryFile().getName();
        setLayout(new BorderLayout());
        add(jScrollPane, BorderLayout.CENTER);
        
        lookupResult = lkp.lookupResult(World.class);
        lookupResult.addLookupListener(this);
    }

    private void update() {
        World world = obj.getLookup().lookup(World.class);
        if (world != null) {
            scene = new WorldScene(world, new Callback() {
                @Override
                public void changed() {
                    syncDocument = true;
                }
            });
            jScrollPane.setViewportView(scene.createView());
        }
    }

    

    @Override
    public String getName() {
        return "Box2DVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
        if (syncDocument) {
            obj.updateDocument();
            syncDocument = false;
        }
    }

    @Override
    public void componentActivated() {
        update();
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        update();
    }
}
